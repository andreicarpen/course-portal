// scripts/build-course-data.mjs
import fs from 'fs/promises';
import path from 'path';

const defsPath = path.resolve('src/lib/course-defs');
const generatedPath = path.resolve('src/lib/generated');
const outputPath = path.join(generatedPath, 'course-structure.ts');

async function buildCourseData() {
  console.log('Building course data...');

  try {
    // Ensure generated directory exists
    await fs.mkdir(generatedPath, { recursive: true });

    // Get list of course IDs from index.ts
    const { courseIds } = await import(path.join(defsPath, 'index.ts'));

    const allCoursesData = [];

    for (const courseId of courseIds) {
      console.log(`Processing course: ${courseId}`);
      const courseDefPath = path.join(defsPath, courseId);

      // Import main course metadata
      const { courseMetadata } = await import(path.join(courseDefPath, 'course.ts'));
      
      const learningPath = [];

      // Process phases
      for (const phaseId of courseMetadata.phaseIds) {
        const { phaseMetadata } = await import(path.join(courseDefPath, 'phases', `${phaseId}.ts`));
        
        const modules = [];
        // Process modules within the phase
        for (const moduleId of phaseMetadata.moduleIds) {
          const modulePath = path.join(courseDefPath, 'modules', `${moduleId}.ts`);
          try {
            const { moduleData } = await import(modulePath);
            modules.push(moduleData);
          } catch (e) {
            console.error(`Error importing module ${moduleId} for phase ${phaseId}:`, e);
          }
        }

        learningPath.push({
          id: phaseMetadata.id,
          title: phaseMetadata.title,
          modules: modules,
        });
      }
      
      allCoursesData.push({
        id: courseMetadata.id,
        title: courseMetadata.title,
        overview: courseMetadata.overview,
        learningPath: learningPath,
      });
    }

    // Prepare the output file content
    const outputContent = `
// THIS FILE IS GENERATED BY scripts/build-course-data.mjs
// DO NOT EDIT THIS FILE DIRECTLY!

import type { Course, Lesson, Phase, Module, Week } from '../types'; // Use relative path from generated dir

export const courses: Course[] = ${JSON.stringify(allCoursesData, null, 2)};

// Helper function to find a course by ID (needed by getLessonById)
export function getCourseById(id: string): Course | undefined {
  return courses.find(course => course.id === id);
}

// Helper function to find the module ID for a given lesson ID
export function findModuleIdForLesson(course: Course, lessonId: string): string | undefined {
  for (const phase of course.learningPath) {
    for (const module of phase.modules) {
      for (const week of module.weeks) {
        if (week.lessons.some(l => l.id === lessonId)) {
          return module.id;
        }
      }
    }
  }
  return undefined;
}

// ** NEW ** Helper function to get previous/next lessons
export function getAdjacentLessons(courseId: string, lessonId: string): { prev: Lesson | null; next: Lesson | null } {
  const course = getCourseById(courseId);
  if (!course) return { prev: null, next: null };

  const allLessons: Lesson[] = [];
  course.learningPath.forEach((phase: Phase) => {
    phase.modules.forEach((module: Module) => {
      module.weeks.forEach((week: Week) => {
        allLessons.push(...week.lessons);
      });
    });
  });

  const currentIndex = allLessons.findIndex(lesson => lesson.id === lessonId);
  
  if (currentIndex === -1) {
    return { prev: null, next: null }; // Current lesson not found in the flattened list
  }

  const prevLesson = currentIndex > 0 ? allLessons[currentIndex - 1] : null;
  const nextLesson = currentIndex < allLessons.length - 1 ? allLessons[currentIndex + 1] : null;

  return { prev: prevLesson, next: nextLesson };
}
`;

    // Write the generated file
    await fs.writeFile(outputPath, outputContent, 'utf-8');

    console.log(`Successfully built course data to ${outputPath}`);

  } catch (error) {
    console.error('Error building course data:', error);
    process.exit(1); // Exit with error code
  }
}

buildCourseData(); 
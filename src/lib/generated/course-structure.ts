
// THIS FILE IS GENERATED BY scripts/build-course-data.mjs
// DO NOT EDIT THIS FILE DIRECTLY!

import type { Course, Lesson, Phase, Module, Week } from '../types'; // Use relative path from generated dir

export const courses: Course[] = [
  {
    "id": "fs-ai-01",
    "title": "Full Stack AI Development: From Fundamentals to Production",
    "overview": "This comprehensive course takes you from programming fundamentals to building sophisticated AI-powered full stack applications. You'll learn web development fundamentals, frontend and backend development, database management, and how to integrate AI capabilities into production-ready applications.",
    "learningPath": [
      {
        "id": "phase-1",
        "title": "Phase 1: Introduction to Programming and Web Development",
        "modules": [
          {
            "id": "mod-1",
            "title": "Module 1: Fundamentals for Beginners",
            "weeks": [
              {
                "id": "p1-m1-w1",
                "title": "Week 1: Introduction to Programming",
                "lessons": [
                  {
                    "id": "p1-m1-w1-l1",
                    "title": "Lesson 1: Understanding Computer Programming"
                  },
                  {
                    "id": "p1-m1-w1-l2",
                    "title": "Lesson 2: Problem-solving approach to programming"
                  },
                  {
                    "id": "p1-m1-w1-pe",
                    "title": "Practical Exercise: Create your first program"
                  }
                ]
              },
              {
                "id": "p1-m1-w2",
                "title": "Week 2: Working with Variables and Operators",
                "lessons": [
                  {
                    "id": "p1-m1-w2-l1",
                    "title": "Lesson 1: Variables and Data Types"
                  },
                  {
                    "id": "p1-m1-w2-l2",
                    "title": "Lesson 2: Operators"
                  },
                  {
                    "id": "p1-m1-w2-pe",
                    "title": "Practical Exercise: Build a simple calculator"
                  }
                ]
              },
              {
                "id": "p1-m1-w3",
                "title": "Week 3: Working with Control Flows",
                "lessons": [
                  {
                    "id": "p1-m1-w3-l1",
                    "title": "Lesson 1: Conditional Statements"
                  },
                  {
                    "id": "p1-m1-w3-l2",
                    "title": "Lesson 2: Loops"
                  },
                  {
                    "id": "p1-m1-w3-pe",
                    "title": "Practical Exercise: Create a number guessing game"
                  }
                ]
              },
              {
                "id": "p1-m1-w4",
                "title": "Week 4: Working with Functions",
                "lessons": [
                  {
                    "id": "p1-m1-w4-l1",
                    "title": "Lesson 1: Function Basics"
                  },
                  {
                    "id": "p1-m1-w4-l2",
                    "title": "Lesson 2: Advanced Function Concepts"
                  },
                  {
                    "id": "p1-m1-w4-pe",
                    "title": "Practical Exercise: Build a function library"
                  }
                ]
              },
              {
                "id": "p1-m1-w5",
                "title": "Week 5: Overview of Web Development Technologies",
                "lessons": [
                  {
                    "id": "p1-m1-w5-l1",
                    "title": "Lesson 1: The Internet and the Web"
                  },
                  {
                    "id": "p1-m1-w5-l2",
                    "title": "Lesson 2: Core Web Technologies"
                  },
                  {
                    "id": "p1-m1-w5-pe",
                    "title": "Practical Exercise: Analyze a website's architecture"
                  }
                ]
              },
              {
                "id": "p1-m1-w6",
                "title": "Week 6: Introduction to Full Stack Development",
                "lessons": [
                  {
                    "id": "p1-m1-w6-l1",
                    "title": "Lesson 1: The Full Stack"
                  },
                  {
                    "id": "p1-m1-w6-l2",
                    "title": "Lesson 2: Developer Tools and Workflows"
                  },
                  {
                    "id": "p1-m1-w6-pe",
                    "title": "Practical Exercise: Set up a development environment for full stack development"
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "id": "phase-2",
        "title": "Phase 2: Web Development",
        "modules": []
      },
      {
        "id": "phase-3",
        "title": "Phase 3: Frontend Development",
        "modules": []
      },
      {
        "id": "phase-4",
        "title": "Phase 4: Backend Development and Databases",
        "modules": []
      },
      {
        "id": "phase-5",
        "title": "Phase 5: AI Fundamentals",
        "modules": []
      },
      {
        "id": "phase-6",
        "title": "Phase 6: AI/ML in Production",
        "modules": []
      }
    ]
  }
];

// Helper function to find a course by ID (needed by getLessonById)
export function getCourseById(id: string): Course | undefined {
  return courses.find(course => course.id === id);
}

// Helper function to find the module ID for a given lesson ID
export function findModuleIdForLesson(course: Course, lessonId: string): string | undefined {
  for (const phase of course.learningPath) {
    for (const module of phase.modules) {
      for (const week of module.weeks) {
        if (week.lessons.some(l => l.id === lessonId)) {
          return module.id;
        }
      }
    }
  }
  return undefined;
}

// ** NEW ** Helper function to get previous/next lessons
export function getAdjacentLessons(courseId: string, lessonId: string): { prev: Lesson | null; next: Lesson | null } {
  const course = getCourseById(courseId);
  if (!course) return { prev: null, next: null };

  const allLessons: Lesson[] = [];
  course.learningPath.forEach((phase: Phase) => {
    phase.modules.forEach((module: Module) => {
      module.weeks.forEach((week: Week) => {
        allLessons.push(...week.lessons);
      });
    });
  });

  const currentIndex = allLessons.findIndex(lesson => lesson.id === lessonId);
  
  if (currentIndex === -1) {
    return { prev: null, next: null }; // Current lesson not found in the flattened list
  }

  const prevLesson = currentIndex > 0 ? allLessons[currentIndex - 1] : null;
  const nextLesson = currentIndex < allLessons.length - 1 ? allLessons[currentIndex + 1] : null;

  return { prev: prevLesson, next: nextLesson };
}
